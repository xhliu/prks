#include <math.h>
#include "Timer.h"
#include "TestSM.h"
 
/**
 * @author Xiaohui Liu (whulxh@gmail.com)
 * @date   12/29/2011
 * @description: test signal map
 */

module TestSMC @safe() {
	uses {
		interface Leds;
		interface Boot;
		interface Timer<TMilli> as MilliTimer;
		
		interface SMSend as Send;
		interface Receive;
		interface Packet;
		interface AMPacket;
		
		interface SignalMap;
		
		interface SplitControl as AMControl;
		
		interface UartLog;
	}
}
implementation {

message_t packet;

bool locked;
uint16_t counter = 0;

event void Boot.booted() {
	call AMControl.start();
}

event void AMControl.startDone(error_t err) {
	if (err == SUCCESS) {
		call MilliTimer.startPeriodic(250);
	} else {
		call AMControl.start();
	}
}

event void AMControl.stopDone(error_t err) {
// do nothing
}

inline float dbmDiff(float x, float y) {
	//return 10 * log10f(powf(10, x / 10) - powf(10, y / 10));	//60 ms
	return 4.3429 * logf(expf(0.23 * x) - expf(0.23 * y));	//24 ms
}

event void MilliTimer.fired() {
	uint32_t time;
	uint32_t interval1, interval2, interval3, interval4;
	float x, y, z;
	float noise = -92.0 + 10.0 * (counter % 3);
	
	time = call MilliTimer.getNow();
	x = expf(0.23 * -71.0);
	interval1 = call MilliTimer.getNow() - time;
	
	y = expf(0.23 * noise);	//powf(10, noise / 10);
	z = x - y;
	time = call MilliTimer.getNow();
	logf(z);
	interval2 = call MilliTimer.getNow() - time;
	
	time = call MilliTimer.getNow();
	z = 10 * log10f(z);
	interval3 = call MilliTimer.getNow() - time;
	
	time = call MilliTimer.getNow();
	dbmDiff(-71, noise);
	interval4 = call MilliTimer.getNow() - time;

	call UartLog.logTxRx(RX_FLAG, counter, noise, z, dbmDiff(-71, noise), interval1, interval2, interval3, interval4);
	
	counter++;
	
	if (locked) {
		return;
	} else {
		radio_count_msg_t* rcm = (radio_count_msg_t*)call Packet.getPayload(&packet, sizeof(radio_count_msg_t));
		if (rcm == NULL) {
			return;
		}
		rcm->counter = counter;
		// specify power
		if (call Send.send(AM_BROADCAST_ADDR, &packet, sizeof(radio_count_msg_t), 3) == SUCCESS) {
			dbg("TestSMC", "packet %hhu sent %f\n", counter, log10f(10));
			call UartLog.logEntry(TX_FLAG, rcm->counter, 0, 0);
			locked = TRUE;
		}
	}
}

event message_t* Receive.receive(message_t* msg, void* payload, uint8_t len) {
	radio_count_msg_t *m = (radio_count_msg_t *)call Packet.getPayload(msg, len);
	am_addr_t nb = call AMPacket.source(msg);
	dbg("TestSMC", "packet %hhu received, gain <%u, %u>\n", m->counter, call SignalMap.getInboundGain(nb), call SignalMap.getOutboundGain(nb));
	//call UartLog.logTxRx(RX_FLAG, nb, dbmDiff(-71, -92), dbmDiff(-71, -82), dbmDiff(-71, -72), log10f(1000), powf(2, 10), call SignalMap.getInboundGain(nb), call SignalMap.getOutboundGain(nb));
	return msg;
}

event void Send.sendDone(message_t* bufPtr, error_t error) {
	if (&packet == bufPtr) {
		locked = FALSE;
	}
}

}




