%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Author: Xiaohui Liu (whulxh@gmail.com)
%   Date:   11/11/2013
%   Function: to analyze the concurrency loss of LAMA vs ideal TDMA
%   Updated: 11/18/13  
%               change priority computation the same as in PRKS
%               add max OLAMA round
%%
% @param LAMA or OLAMA
% @param grid_nodes: nodes forming a grid topology starting from id 1
% @param interference_range: interference range in the unit of grid unit
% @param slot_len: # of slots to compute schedule for
% @param max_round: 
% @return: generated schedule
function [schedules, interference_matrix] = LAMA(is_optimized, is_priority_randomized, row_cnt, column_cnt, interference_range, slot_len, max_round)
    total_node_cnt = row_cnt * column_cnt;
    schedules = cell(total_node_cnt, 1);
    interference_matrix = repmat(false, total_node_cnt);
    
    % compute interference relationships
    % i, j are matrix indices
    for i = 1 : total_node_cnt
        i_x = mod(i - 1, row_cnt);
        i_y = floor((i - 1) / row_cnt);
        
        for j = 1 : total_node_cnt
            % a node does not conflict w/ itself
            if j == i
                continue;
            end
            
            j_x = mod(j - 1, row_cnt);
            j_y = floor((j - 1) / row_cnt);
            dist = sqrt((i_x - j_x) ^ 2 + (i_y - j_y) ^ 2);
            if dist <= interference_range
                interference_matrix(i, j) = true;
            end
        end
    end
    
    for i = 1 : slot_len
        schedule = [];
        if is_priority_randomized
            fprintf('processing slot %d\n', i);
            % assume: random numbers are distinct
            prios = rand(total_node_cnt, 1);
        else
            fprintf('warning: not randomized, processing slot %d\n', i);
            % same as PRKS
            %prios = mod((1 : total_node_cnt)' + i - 1, total_node_cnt);
            t = mod(i, 128);
            prios = bitxor((1 : total_node_cnt)', t);
        end

        if is_optimized
            % local copy
            local_interference_matrix = interference_matrix;
            all_nodes = (1 : total_node_cnt)';
            residual_nodes = all_nodes;
            is_any_node_added = true;
            
            round = 0;
            while is_any_node_added
                len = length(residual_nodes);
                if 0 == len
                    break;
                end
                
                % store nodes to be removed
                removing_node_set = [];
                tmp = local_interference_matrix;
                
                is_any_node_added = false;
                % each remaining node
                for j = 1 : len
                    node = residual_nodes(j);
                    my_prio = prios(node);
                    conflict_node_idx = local_interference_matrix(:, node);
                    interferer_prios = prios(conflict_node_idx);
                    
                    % I'm local maximum
                    if sum(my_prio <= interferer_prios) == 0
                        schedule = [schedule; node];
                        %residual_nodes(residual_nodes == node) = [];
                        removing_node_set = union(removing_node_set, node);
                        is_any_node_added = true;
                        
                        % remove conflicting nodes w/ the newly added node, which do not participate
                        % in contention anymore, i.e., not interfer w/ any
                        % other node
                        tmp(:, conflict_node_idx) = false;
                        tmp(conflict_node_idx, :) = false;

                        % also remove from remaining set bcoz they are
                        % impossible to win the contention
                        %residual_nodes = setdiff(residual_nodes, all_nodes(conflict_node_idx));
                        removing_node_set = union(removing_node_set, all_nodes(conflict_node_idx));
                    end
                end
                local_interference_matrix = tmp;
                residual_nodes = setdiff(residual_nodes, removing_node_set);
                
                round = round + 1;
                if round >= max_round
                    break;
                end         
            end
        else
            % each node
            for j = 1 : total_node_cnt
                my_prio = prios(j);
                interferer_prios = prios(interference_matrix(:, j));
                % I'm local maximum
                if sum(my_prio <= interferer_prios) == 0
                    schedule = [schedule; j];
                end
            end
        end
        
        schedules{i} = schedule;
    end
end